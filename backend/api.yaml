openapi: 3.0.3
info:
  title: "Todo-App API"
  version: "1.0"
paths:
  /healthz:
    get:
      summary: Get the health status of the TODOs application
      operationId: getHealthZ
      responses:
        "200":
          description: Successful healthz response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthZ"
        default:
          $ref: "#/components/responses/StandardProblemResponse"

  /workspace/{workspaceId}/todos:
    get:
      summary: List TODOs in the current workspace.
      operationId: listTodos
      parameters:
        - name: workspaceId
          in: path
          description: The workspace id or 'public' to use the Public workspace.
          required: true
          schema:
            type: string
            pattern: ^public|(?:[A-Za-z0-9]{6,26})$
      responses:
        "200":
          description: Successful list response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoPage"
        "400":
          $ref: "#/components/responses/StandardBadRequestProblem"
        "404":
          $ref: "#/components/responses/StandardNotFoundProblem"
        default:
          $ref: "#/components/responses/StandardProblemResponse"
    post:
      summary: Create a new TODO in the workspace.
      operationId: createTodo
      parameters:
        - name: workspaceId
          in: path
          description: The workspace id or 'public' to use the Public workspace.
          required: true
          schema:
            type: string
            pattern: ^public|(?:[A-Za-z0-9]{6,26})$
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTodo"
      responses:
        "201":
          description: Successful create response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          $ref: "#/components/responses/StandardBadRequestProblem"
        "404":
          $ref: "#/components/responses/StandardNotFoundProblem"
        default:
          $ref: "#/components/responses/StandardProblemResponse"

components:
  responses:
    StandardBadRequestProblem:
      description: The parameters or contents of the request were not valid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    StandardNotFoundProblem:
      description: The requested or associated resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    StandardProblemResponse:
      description: A problem occurred while processing the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
  schemas:
    Problem:
      type: object
      description: An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
      properties:
        type:
          description: A URI reference that identifies the problem type or class.
          type: string
          format: uri
          example: "http://example.com/problems/500"
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the Problem.
          type: integer
          example: 400
        title:
          description: A short human-readable summary of the problem type.
          type: string
          example: A generic error
        detail:
          description: A longer human-readable explanation specific to this occurrence of the Problem.
          type: string
          example: The value was bad
        instance:
          description: A URI reference that identifies the specific occurrence of the Problem.
          type: string
          format: uri
          example: "http://example.com/analytics/123451235124"
      required:
        - type
        - status
        - title
        - detail
    HealthZ:
      type: object
      additionalProperties: false
      properties: {}
    CreateTodo:
      type: object
      additionalProperties: false
      properties:
        title:
          description: The title of the TODO item.
          type: string
          example: Do the thing
          minLength: 3
          maxLength: 200
        details:
          description: The longer rich text content of the TODO item.
          type: string
          example: Details about how to do the thing.
          default: ""
          maxLength: 5000
      required:
        - title
    Todo:
      type: object
      additionalProperties: false
      properties:
        id:
          description: A unique identifier for this TODO item.
          type: string
          example: "00001"
        title:
          description: The title of the TODO item.
          type: string
          example: Do the thing
        details:
          description: The longer rich text content of the TODO item.
          type: string
          example: Details about how to do the thing.
        current_status:
          description: The current status of the TODO item.
          type: string
          example: open
        created_at:
          description: The time that the TODO item was first created.
          type: string
          format: date-time
          example: "2024-12-31T23:59:59.999Z"
        revision:
          description: A monotonic revision number associated with this TODO item.
          type: integer
          example: 1
      required:
        - title
        - details
        - current_status
        - created_at
        - revision
    TodoPage:
      type: object
      additionalProperties: false
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Todo"