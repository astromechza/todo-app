// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Defines values for ListTodosParamsSortUpdatedAt.
const (
	Asc  ListTodosParamsSortUpdatedAt = "asc"
	Desc ListTodosParamsSortUpdatedAt = "desc"
)

// CreateTodo defines model for CreateTodo.
type CreateTodo struct {
	// Details The longer rich text content of the TODO item.
	Details *string `json:"details,omitempty"`

	// GroupId The workspace this TODO should be created in
	GroupId *string `json:"group_id,omitempty"`

	// Title The title of the TODO item.
	Title string `json:"title"`
}

// HealthZ defines model for HealthZ.
type HealthZ = map[string]interface{}

// Problem An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
type Problem struct {
	// Detail A longer human-readable explanation specific to this occurrence of the Problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the Problem.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the Problem.
	Status int `json:"status"`

	// Title A short human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type or class.
	Type string `json:"type"`
}

// Todo defines model for Todo.
type Todo struct {
	// Details The longer rich text content of the TODO item.
	Details  *string      `json:"details,omitempty"`
	Metadata TodoMetadata `json:"metadata"`

	// Status The current status of the TODO item.
	Status string `json:"status"`

	// Title The title of the TODO item.
	Title string `json:"title"`
}

// TodoMetadata defines model for TodoMetadata.
type TodoMetadata struct {
	// CreatedAt The time that the TODO item was first created.
	CreatedAt time.Time `json:"created_at"`

	// Epoch A unique epoch for this TODO item.
	Epoch int `json:"epoch"`

	// GroupEpoch The epoch of the workspace this TODO item is tied to.
	GroupEpoch int `json:"group_epoch"`

	// GroupId The workspace this TODO item exists in
	GroupId string `json:"group_id"`

	// Id A unique identifier for this TODO item.
	Id string `json:"id"`

	// Revision A monotonic revision number associated with this TODO item.
	Revision int `json:"revision"`

	// UpdatedAt The time that the TODO item was last updated.
	UpdatedAt time.Time `json:"updated_at"`

	// WorkspaceEpoch The epoch of the workspace this TODO item is tied to.
	WorkspaceEpoch int `json:"workspace_epoch"`

	// WorkspaceId The workspace this TODO item exists in
	WorkspaceId string `json:"workspace_id"`
}

// TodoPage defines model for TodoPage.
type TodoPage struct {
	Items          []Todo  `json:"items"`
	NextPageToken  *string `json:"next_page_token,omitempty"`
	RemainingItems int     `json:"remaining_items"`
}

// StandardBadRequestProblem An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
type StandardBadRequestProblem = Problem

// StandardNotFoundProblem An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
type StandardNotFoundProblem = Problem

// StandardProblemResponse An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
type StandardProblemResponse = Problem

// ListTodosParams defines parameters for ListTodos.
type ListTodosParams struct {
	// Page The page token to request.
	Page *string `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The page size to limit the response to.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Status Filter by a status.
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// SortUpdatedAt Sort by updated at
	SortUpdatedAt *ListTodosParamsSortUpdatedAt `form:"sort_updated_at,omitempty" json:"sort_updated_at,omitempty"`
}

// ListTodosParamsSortUpdatedAt defines parameters for ListTodos.
type ListTodosParamsSortUpdatedAt string

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = CreateTodo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the health status of the TODOs application
	// (GET /healthz)
	GetHealthZ(ctx echo.Context) error
	// List TODOs in the current workspace.
	// (GET /workspace/{workspaceId}/todos)
	ListTodos(ctx echo.Context, workspaceId string, params ListTodosParams) error
	// Create a new TODO in the workspace.
	// (POST /workspace/{workspaceId}/todos)
	CreateTodo(ctx echo.Context, workspaceId string) error
	// Delete a TODO item by id.
	// (DELETE /workspace/{workspaceId}/todos/{todoId})
	DeleteTodo(ctx echo.Context, workspaceId string, todoId string) error
	// Get a TODO item by id.
	// (GET /workspace/{workspaceId}/todos/{todoId})
	GetTodo(ctx echo.Context, workspaceId string, todoId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealthZ converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthZ(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthZ(ctx)
	return err
}

// ListTodos converts echo context to params.
func (w *ServerInterfaceWrapper) ListTodos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, ctx.Param("workspaceId"), &workspaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTodosParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "sort_updated_at" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_updated_at", ctx.QueryParams(), &params.SortUpdatedAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_updated_at: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListTodos(ctx, workspaceId, params)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, ctx.Param("workspaceId"), &workspaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTodo(ctx, workspaceId)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, ctx.Param("workspaceId"), &workspaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	// ------------- Path parameter "todoId" -------------
	var todoId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "todoId", runtime.ParamLocationPath, ctx.Param("todoId"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodo(ctx, workspaceId, todoId)
	return err
}

// GetTodo converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, ctx.Param("workspaceId"), &workspaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	// ------------- Path parameter "todoId" -------------
	var todoId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "todoId", runtime.ParamLocationPath, ctx.Param("todoId"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodo(ctx, workspaceId, todoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/healthz", wrapper.GetHealthZ)
	router.GET(baseURL+"/workspace/:workspaceId/todos", wrapper.ListTodos)
	router.POST(baseURL+"/workspace/:workspaceId/todos", wrapper.CreateTodo)
	router.DELETE(baseURL+"/workspace/:workspaceId/todos/:todoId", wrapper.DeleteTodo)
	router.GET(baseURL+"/workspace/:workspaceId/todos/:todoId", wrapper.GetTodo)

}

type StandardBadRequestProblemJSONResponse Problem

type StandardNotFoundProblemJSONResponse Problem

type StandardProblemResponseJSONResponse Problem

type GetHealthZRequestObject struct {
}

type GetHealthZResponseObject interface {
	VisitGetHealthZResponse(w http.ResponseWriter) error
}

type GetHealthZ200JSONResponse HealthZ

func (response GetHealthZ200JSONResponse) VisitGetHealthZResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthZdefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response GetHealthZdefaultJSONResponse) VisitGetHealthZResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTodosRequestObject struct {
	WorkspaceId string `json:"workspaceId"`
	Params      ListTodosParams
}

type ListTodosResponseObject interface {
	VisitListTodosResponse(w http.ResponseWriter) error
}

type ListTodos200JSONResponse TodoPage

func (response ListTodos200JSONResponse) VisitListTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTodos400JSONResponse struct {
	StandardBadRequestProblemJSONResponse
}

func (response ListTodos400JSONResponse) VisitListTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListTodos404JSONResponse struct {
	StandardNotFoundProblemJSONResponse
}

func (response ListTodos404JSONResponse) VisitListTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTodosdefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response ListTodosdefaultJSONResponse) VisitListTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTodoRequestObject struct {
	WorkspaceId string `json:"workspaceId"`
	Body        *CreateTodoJSONRequestBody
}

type CreateTodoResponseObject interface {
	VisitCreateTodoResponse(w http.ResponseWriter) error
}

type CreateTodo201JSONResponse Todo

func (response CreateTodo201JSONResponse) VisitCreateTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTodo400JSONResponse struct {
	StandardBadRequestProblemJSONResponse
}

func (response CreateTodo400JSONResponse) VisitCreateTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTodo404JSONResponse struct {
	StandardNotFoundProblemJSONResponse
}

func (response CreateTodo404JSONResponse) VisitCreateTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateTododefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response CreateTododefaultJSONResponse) VisitCreateTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTodoRequestObject struct {
	WorkspaceId string `json:"workspaceId"`
	TodoId      string `json:"todoId"`
}

type DeleteTodoResponseObject interface {
	VisitDeleteTodoResponse(w http.ResponseWriter) error
}

type DeleteTodo204Response struct {
}

func (response DeleteTodo204Response) VisitDeleteTodoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTodo400JSONResponse struct {
	StandardBadRequestProblemJSONResponse
}

func (response DeleteTodo400JSONResponse) VisitDeleteTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTodo404JSONResponse struct {
	StandardNotFoundProblemJSONResponse
}

func (response DeleteTodo404JSONResponse) VisitDeleteTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTododefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response DeleteTododefaultJSONResponse) VisitDeleteTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTodoRequestObject struct {
	WorkspaceId string `json:"workspaceId"`
	TodoId      string `json:"todoId"`
}

type GetTodoResponseObject interface {
	VisitGetTodoResponse(w http.ResponseWriter) error
}

type GetTodo200JSONResponse Todo

func (response GetTodo200JSONResponse) VisitGetTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTodo400JSONResponse struct {
	StandardBadRequestProblemJSONResponse
}

func (response GetTodo400JSONResponse) VisitGetTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTodo404JSONResponse struct {
	StandardNotFoundProblemJSONResponse
}

func (response GetTodo404JSONResponse) VisitGetTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTododefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response GetTododefaultJSONResponse) VisitGetTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the health status of the TODOs application
	// (GET /healthz)
	GetHealthZ(ctx context.Context, request GetHealthZRequestObject) (GetHealthZResponseObject, error)
	// List TODOs in the current workspace.
	// (GET /workspace/{workspaceId}/todos)
	ListTodos(ctx context.Context, request ListTodosRequestObject) (ListTodosResponseObject, error)
	// Create a new TODO in the workspace.
	// (POST /workspace/{workspaceId}/todos)
	CreateTodo(ctx context.Context, request CreateTodoRequestObject) (CreateTodoResponseObject, error)
	// Delete a TODO item by id.
	// (DELETE /workspace/{workspaceId}/todos/{todoId})
	DeleteTodo(ctx context.Context, request DeleteTodoRequestObject) (DeleteTodoResponseObject, error)
	// Get a TODO item by id.
	// (GET /workspace/{workspaceId}/todos/{todoId})
	GetTodo(ctx context.Context, request GetTodoRequestObject) (GetTodoResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHealthZ operation middleware
func (sh *strictHandler) GetHealthZ(ctx echo.Context) error {
	var request GetHealthZRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthZ(ctx.Request().Context(), request.(GetHealthZRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthZ")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHealthZResponseObject); ok {
		return validResponse.VisitGetHealthZResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListTodos operation middleware
func (sh *strictHandler) ListTodos(ctx echo.Context, workspaceId string, params ListTodosParams) error {
	var request ListTodosRequestObject

	request.WorkspaceId = workspaceId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListTodos(ctx.Request().Context(), request.(ListTodosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTodos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListTodosResponseObject); ok {
		return validResponse.VisitListTodosResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTodo operation middleware
func (sh *strictHandler) CreateTodo(ctx echo.Context, workspaceId string) error {
	var request CreateTodoRequestObject

	request.WorkspaceId = workspaceId

	var body CreateTodoJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTodo(ctx.Request().Context(), request.(CreateTodoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTodo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateTodoResponseObject); ok {
		return validResponse.VisitCreateTodoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTodo operation middleware
func (sh *strictHandler) DeleteTodo(ctx echo.Context, workspaceId string, todoId string) error {
	var request DeleteTodoRequestObject

	request.WorkspaceId = workspaceId
	request.TodoId = todoId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTodo(ctx.Request().Context(), request.(DeleteTodoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTodo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTodoResponseObject); ok {
		return validResponse.VisitDeleteTodoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTodo operation middleware
func (sh *strictHandler) GetTodo(ctx echo.Context, workspaceId string, todoId string) error {
	var request GetTodoRequestObject

	request.WorkspaceId = workspaceId
	request.TodoId = todoId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTodo(ctx.Request().Context(), request.(GetTodoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTodo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTodoResponseObject); ok {
		return validResponse.VisitGetTodoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
